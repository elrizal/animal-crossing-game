{"version":3,"sources":["components/Game.js","App.js","registerServiceWorker.js","index.js"],"names":["Game","state","cardData","Object","toConsumableArray","currentScore","topScore","handleCardClick","cardId","isCorrect","_this","forEach","card","id","clicked","handleCorrect","handleIncorrect","shuffledCards","sort","Math","random","setState","_this2","this","react_default","a","createElement","Fragment","className","Row_default","map","key","Card_default","src","image","alt","name","onClick","Component","App","class","Grid_default","components_Game","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.b7329153.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Row from 'react-bootstrap/lib/Row';\nimport cardData from '../clickCards.json';\nimport Card from 'material-ui/Card';\n\nclass Game extends Component {\n  state = {\n    cardData: [...cardData],\n    currentScore: 0,\n    topScore: 0\n  };\n\n  // create method to handle clicking on a card\n  handleCardClick = cardId => {\n    // create a flag variable to check if we're correct or not\n    let isCorrect = false;\n\n    // make a copy of the cardData from state\n    const cardData = [...this.state.cardData];\n\n    // loop over that copied array and find the object with the id you clicked on\n    // check if card you clicked on has been clicked before\n    // if no => set isCorrect to true and set the card's clicked status to true\n    cardData.forEach(card => {\n      if (card.id === cardId) {\n        if (!card.clicked) {\n          isCorrect = true;\n          card.clicked = true;\n        }\n      }\n    });\n\n    // check if isCorrect is true or false\n    // if true => run logic for handling a correct guess\n    // if false => run logic for handling an incorrect guess\n    isCorrect ? this.handleCorrect(cardData) : this.handleIncorrect(cardData);\n  };\n\n  handleCorrect = cardData => {\n    // shuffle cards\n    const shuffledCards = cardData.sort(() => 0.5 - Math.random());\n\n    // get current score and add 1 to it\n    const currentScore = this.state.currentScore + 1;\n\n    let topScore = this.state.topScore;\n\n    // check if current score is greater than topScore\n    if (currentScore > topScore) {\n      topScore = currentScore;\n    }\n\n    this.setState({\n      cardData: shuffledCards,\n      currentScore: currentScore,\n      topScore: topScore\n    });\n  };\n\n  handleIncorrect = cardData => {\n    const shuffledCards = cardData.sort(() => 0.5 - Math.random());\n\n    // reset all cards to not be clicked\n    shuffledCards.forEach(card => (card.clicked = false));\n\n    this.setState({\n      cardData: shuffledCards,\n      currentScore: 0\n    });\n  };\n\n\n  render() {\n    return (\n      <React.Fragment>\n    <h3>         Current Score: {this.state.currentScore} || Top Score: {this.state.topScore}\n    </h3>\n        <div className=\"container-fluid\">\n          <Row>\n            {this.state.cardData.map(card => {\n                return (\n                <div className=\"col-12 col-sm-3 col-md-3\" key={card.id}>\n                <Card className=\"img-container animated fadeIn\">\n                    <img\n                    src={card.image}\n                    alt={card.name}\n                    onClick={() => this.handleCardClick(card.id)}\n                    />\n                    </Card>\n                    <br/>\n                </div>\n                );\n            })}\n            </Row>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\nexport default Game;\n","\nimport React, { Component } from 'react';\nimport './App.css';\nimport Grid from 'react-bootstrap/lib/Grid';\nimport Game from './components/Game';\n\n\nclass App extends Component {\n  render() {\n    return (\n      <React.Fragment >\n          <div className=\"header\">\n          <div className=\"container\">\n          <i class=\"fas fa-leaf\"></i> <h1>Remember Your New Neighbors!</h1>\n          <div class=\"wordbubble\" >\n\n          <h5> Okay, maybe you're \"not good with names\" but the least you could do is remember our faces!\n           Test your memory below by clicking on animals you haven't clicked on before!</h5>\n          </div>\n          </div>         \n          </div>\n        <Grid>\n        <Game/>\n      </Grid>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n// readers.map(item, index) => { })\n// <h1 className={message ==\"correct\" ? \"CologChange\" : \"\" }>blah</h1> to change the css of a state change"],"sourceRoot":""}