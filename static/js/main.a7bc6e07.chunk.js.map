{"version":3,"sources":["components/Game.js","App.js","registerServiceWorker.js","index.js"],"names":["Game","Component","state","cardData","currentScore","topScore","handleCardClick","cardId","isCorrect","this","forEach","card","id","clicked","handleCorrect","handleIncorrect","shuffledCards","sort","Math","random","setState","render","Fragment","className","map","key","src","image","alt","name","onClick","App","class","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"8OAKA,MAAMA,UAAaC,YAAW,eAAD,oBAC3BC,MAAQ,CACNC,SAAU,IAAIA,GACdC,aAAc,EACdC,SAAU,GAJe,KAM3BC,gBAAkBC,IAChB,IAAIC,GAAY,EAEhB,MAAML,EAAW,IAAIM,KAAKP,MAAMC,UAEhCA,EAASO,QAAQC,IACXA,EAAKC,KAAOL,IACTI,EAAKE,UACRL,GAAY,EACZG,EAAKE,SAAU,MAKrBL,EAAYC,KAAKK,cAAcX,GAAYM,KAAKM,gBAAgBZ,IApBvC,KAuB3BW,cAAgBX,IACd,MAAMa,EAAgBb,EAASc,KAAK,IAAM,GAAMC,KAAKC,UAE/Cf,EAAeK,KAAKP,MAAME,aAAe,EAE/C,IAAIC,EAAWI,KAAKP,MAAMG,SAEtBD,EAAeC,IACjBA,EAAWD,GAGbK,KAAKW,SAAS,CACZjB,SAAUa,EACVZ,aAAcA,EACdC,SAAUA,KArCa,KAyC3BU,gBAAkBZ,IAChB,MAAMa,EAAgBb,EAASc,KAAK,IAAM,GAAMC,KAAKC,UAErDH,EAAcN,QAAQC,GAASA,EAAKE,SAAU,GAE9CJ,KAAKW,SAAS,CACZjB,SAAUa,EACVZ,aAAc,KAKlBiB,SACE,OACE,kBAAC,IAAMC,SAAP,KACF,uDAA6Bb,KAAKP,MAAME,aAAxC,kBAAqEK,KAAKP,MAAMG,UAE5E,yBAAKkB,UAAU,mBACb,kBAAC,IAAD,KACGd,KAAKP,MAAMC,SAASqB,IAAIb,GAErB,yBAAKY,UAAU,2BAA2BE,IAAKd,EAAKC,IACpD,kBAAC,IAAD,CAAMW,UAAU,iCACZ,yBACAG,IAAKf,EAAKgB,MACVC,IAAKjB,EAAKkB,KACVC,QAAS,IAAMrB,KAAKH,gBAAgBK,EAAKC,OAGzC,mCAULZ,QC/Ef,MAAM+B,UAAY9B,YAChBoB,SACE,OACE,kBAAC,IAAMC,SAAP,KACI,yBAAKC,UAAU,UACf,yBAAKA,UAAU,aACf,uBAAGS,MAAM,gBADT,IAC4B,4DAC5B,yBAAKA,MAAM,cAEX,6MAKF,kBAAC,IAAD,KACA,kBAAC,EAAD,SAOOD,QClBf,MAAME,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,KAAKC,IACJA,EAAaC,cAAgB,KAC3B,MAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,KACA,cAA3BF,EAAiB7C,QACfuC,UAAUC,cAAcQ,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,2CAMrBC,MAAMC,IACLH,QAAQG,MAAM,4CAA6CA,KCzEjEC,IAASlC,OAAO,kBAAC,EAAD,MAASmC,SAASC,eAAe,SDclC,WACb,GAA6C,kBAAmBhB,UAAW,CAGzE,GADkB,IAAIiB,IAAIC,wBAAwBxB,OAAOC,UAC3CwB,SAAWzB,OAAOC,SAASwB,OAIvC,OAGFzB,OAAO0B,iBAAiB,OAAQ,KAC9B,MAAMrB,EAAK,UAAMmB,wBAAN,sBAEP1B,IAiDV,SAAiCO,GAE/BsB,MAAMtB,GACHI,KAAKmB,IAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7C1B,UAAUC,cAAc0B,MAAMxB,KAAKC,IACjCA,EAAawB,aAAazB,KAAK,KAC7BT,OAAOC,SAASkC,aAKpB/B,EAAgBC,KAGnBa,MAAM,KACLF,QAAQC,IACN,mEArEAmB,CAAwB/B,GAIxBC,UAAUC,cAAc0B,MAAMxB,KAAK,KACjCO,QAAQC,IACN,+GAMJb,EAAgBC,MCzCxBgC,I","file":"static/js/main.a7bc6e07.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Row from 'react-bootstrap/lib/Row';\nimport cardData from '../clickCards.json';\nimport Card from 'material-ui/Card';\n\nclass Game extends Component {\n  state = {\n    cardData: [...cardData],\n    currentScore: 0,\n    topScore: 0\n  };\n  handleCardClick = cardId => {\n    let isCorrect = false;\n\n    const cardData = [...this.state.cardData];\n\n    cardData.forEach(card => {\n      if (card.id === cardId) {\n        if (!card.clicked) {\n          isCorrect = true;\n          card.clicked = true;\n        }\n      }\n    });\n\n    isCorrect ? this.handleCorrect(cardData) : this.handleIncorrect(cardData);\n  };\n\n  handleCorrect = cardData => {\n    const shuffledCards = cardData.sort(() => 0.5 - Math.random());\n\n    const currentScore = this.state.currentScore + 1;\n\n    let topScore = this.state.topScore;\n\n    if (currentScore > topScore) {\n      topScore = currentScore;\n    }\n\n    this.setState({\n      cardData: shuffledCards,\n      currentScore: currentScore,\n      topScore: topScore\n    });\n  };\n\n  handleIncorrect = cardData => {\n    const shuffledCards = cardData.sort(() => 0.5 - Math.random());\n\n    shuffledCards.forEach(card => (card.clicked = false));\n\n    this.setState({\n      cardData: shuffledCards,\n      currentScore: 0\n    });\n  };\n\n\n  render() {\n    return (\n      <React.Fragment>\n    <h3>         Current Score: {this.state.currentScore} || Top Score: {this.state.topScore}\n    </h3>\n        <div className=\"container-fluid\">\n          <Row>\n            {this.state.cardData.map(card => {\n                return (\n                <div className=\"col-12 col-sm-3 col-md-3\" key={card.id}>\n                <Card className=\"img-container animated fadeIn\">\n                    <img\n                    src={card.image}\n                    alt={card.name}\n                    onClick={() => this.handleCardClick(card.id)}\n                    />\n                    </Card>\n                    <br/>\n                </div>\n                );\n            })}\n            </Row>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\nexport default Game;\n","\nimport React, { Component } from 'react';\nimport Grid from 'react-bootstrap/lib/Grid';\nimport Game from './components/Game';\n\n\nclass App extends Component {\n  render() {\n    return (\n      <React.Fragment >\n          <div className=\"header\">\n          <div className=\"container\">\n          <i class=\"fas fa-leaf\"></i> <h1>Remember Your New Neighbors!</h1>\n          <div class=\"wordbubble\" >\n\n          <h5> Okay, maybe you're \"not good with names\" but the least you could do is remember our faces!\n           Test your memory below by clicking on animals you haven't clicked on before!</h5>\n          </div>\n          </div>         \n          </div>\n        <Grid>\n        <Game/>\n      </Grid>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './App.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n// readers.map(item, index) => { })\n// <h1 className={message ==\"correct\" ? \"CologChange\" : \"\" }>blah</h1> to change the css of a state change"],"sourceRoot":""}